package org.scalanative.testsuite.javalib.util

import org.junit.Test
import org.junit.Assert._
import org.junit.Ignore

import org.scalanative.testsuite.utils.AssertThrows.assertThrows

/* Keep Test import environment minimal. Import only the classes that are used.
 * Fewer chances for hidden and/or unintended interactions.
 */

import java.util.Collections
import java.util.{Arrays, List, SplittableRandom}

class CollectionsTestOnJDK21 {

  @Test def shuffle_RandomGenerator(): Unit = {

// format: off
    /* List must be mutable. It is shuffled in-place.
     *  It help debugging if it starts as obviously ordered 
     */
    val sortMe = Arrays.asList( // atlantic storm names, 2025
      "Andrea", "Barry", "Chantal", "Dexter", "Erin",
      "Fernand", "Gabrielle", "Humberto", "Imelda", "Jerry",
      "Karen", "Lorenzo", "Melissa", "Nestor", "Olga",
      "Pablo", "Rebekah", "Sebastien", "Tanya", "Van",
      "Wendy"
    )
// format: on

    val referenceCopy = List.copyOf(sortMe) // unmodifiable

    val seed = 1721657971694L // an arbitrary number, set for repeatability.
    val rng = new SplittableRandom(seed)

    Collections.shuffle(sortMe, rng)

    /* This "do the lists differ" check is pretty weak but is about the best
     * that can be done in a robust Continuous Integrations environment.
     * This test says nothing about the quality of the underlying shuffle.
     *
     * The implementation of SplittableRandom on both the JVM and Scala Native
     * is subject to change. JEP356: Enhanced Pseudo-Random Number Generators
     * discusses weaknesses at that time in the JVM SplittableRandom.
     *
     * At the time of this writing, the sequence generated by SplittableRandom
     * on JVM and Scala Native differs. Tests become uneconomically complex.
     *
     * The short story is that one can not rely on the sequence of generated
     * numbers to be stable over the order of tens of months.
     *
     * If one is concerned about the quality of the shuffle, one needs to
     * implement manual tests.
     */

    assertFalse(
      "shuffled list should differ",
      sortMe.equals(referenceCopy)
    )
  }
}
