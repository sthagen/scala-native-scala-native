// format: off
package org.scalanative.testsuite.javalib.nio

import java.nio._


// Ported from Scala.js
sealed abstract class BufferAdapter[BT <: Buffer, ET] {
  type BufferType = BT
  type ElementType = ET
  def buffer: BT

  /* Some methods have a Chain suffix because they are declared as abstract in
   * java.nio.Buffer since Java 9, but with a result type of `Buffer` instead
   * of the more specific `BufferType`. We use the `Chain` variant to be able
   * to chain their application with further operations on the specific
   * `BufferType`.
   */

  def hasArray(): Boolean = buffer.hasArray()
  def arrayOffset(): Int = buffer.arrayOffset()
  
  def sliceChain(): BufferType
  def duplicateChain(): BufferType
  def array(): Array[ElementType]
  def asReadOnlyBuffer(): BufferType
  def get(): ElementType
  def put(e: ElementType): BufferType
  def get(index: Int): ElementType
  def put(index: Int, e: ElementType): BufferType
  def get(dst: Array[ElementType], offset: Int, length: Int): BufferType
  def get(dst: Array[ElementType]): BufferType
  def put(src: BufferType): BufferType
  def put(src: Array[ElementType], offset: Int, length: Int): BufferType
  def put(src: Array[ElementType])(implicit dummy: DummyImplicit): BufferType
  
  def compact(): BufferType
  def order(): ByteOrder

/* >>REQUIRE-JDK-16
  def sliceChain(index: Int, length: Int): BufferType
  def get(index: Int, dst: Array[ElementType]): BufferType
  def get(index: Int, dst: Array[ElementType], offset: Int, length: Int): BufferType
  def put(index: Int, src: Array[ElementType], offset: Int, length: Int): BufferType
  def put(index: Int, src: Array[ElementType])(implicit dummy: DummyImplicit): BufferType
<<REQUIRE-JDK-16 */

}

object BufferAdapter {
  %{
   variants = [
    ('Byte'  ),
    ('Char'  ),
    ('Short' ),
    ('Int'   ),
    ('Long'  ),
    ('Float' ),
    ('Double')
   ]
}%
% for (T) in variants:
  class ${T}BufferAdapater(val buffer: ${T}Buffer) extends BufferAdapter[${T}Buffer, ${T}] {
    def sliceChain(): BufferType = buffer.slice()
    def duplicateChain(): BufferType = buffer.duplicate()
    def array(): Array[ElementType] = buffer.array()
    def asReadOnlyBuffer(): BufferType = buffer.asReadOnlyBuffer()
    def get(): ElementType = buffer.get()
    def put(e: ElementType): BufferType = buffer.put(e)
    def get(index: Int): ElementType = buffer.get(index)
    def put(index: Int, e: ElementType): BufferType = buffer.put(index, e)
    def get(dst: Array[ElementType], offset: Int, length: Int): BufferType = buffer.get(dst, offset, length)
    def get(dst: Array[ElementType]): BufferType = buffer.get(dst)
    def put(src: BufferType): BufferType = buffer.put(src)
    def put(src: Array[ElementType], offset: Int, length: Int): BufferType = buffer.put(src, offset, length)
    def put(src: Array[ElementType])(implicit dummy: DummyImplicit): BufferType = buffer.put(src)
    def compact(): BufferType = buffer.compact()
    def order(): ByteOrder = buffer.order()
/* >>REQUIRE-JDK-16
    def sliceChain(index: Int, length: Int): BufferType = buffer.slice(index, length)
    def get(index: Int, dst: Array[ElementType]): BufferType = buffer.get(index, dst)
    def get(index: Int, dst: Array[ElementType], offset: Int, length: Int): BufferType = buffer.get(index, dst, offset, length)
    def put(index: Int, src: Array[ElementType], offset: Int, length: Int): BufferType = buffer.put(index, src, offset, length)
    def put(index: Int, src: Array[ElementType])(implicit dummy: DummyImplicit): BufferType = buffer.put(index, src)
<<REQUIRE-JDK-16 */
  }
% end

}
