--- 2.11.12/scala/Array.scala
+++ overrides-2.11/scala/Array.scala
@@ -14,6 +14,7 @@
 import scala.compat.Platform.arraycopy
 import scala.reflect.ClassTag
 import scala.runtime.ScalaRunTime.{ array_apply, array_update }
+import scala.collection.mutable.WrappedArray
 
 /** Contains a fallback builder for arrays when the element type
  *  does not have a class tag. In that case a generic array is built.
@@ -48,15 +49,15 @@
  *  @version 1.0
  */
 object Array extends FallbackArrayBuilding {
-  val emptyBooleanArray = new Array[Boolean](0)
-  val emptyByteArray    = new Array[Byte](0)
-  val emptyCharArray    = new Array[Char](0)
-  val emptyDoubleArray  = new Array[Double](0)
-  val emptyFloatArray   = new Array[Float](0)
-  val emptyIntArray     = new Array[Int](0)
-  val emptyLongArray    = new Array[Long](0)
-  val emptyShortArray   = new Array[Short](0)
-  val emptyObjectArray  = new Array[Object](0)
+  @inline def emptyBooleanArray = new Array[Boolean](0)
+  @inline def emptyByteArray    = new Array[Byte](0)
+  @inline def emptyCharArray    = new Array[Char](0)
+  @inline def emptyDoubleArray  = new Array[Double](0)
+  @inline def emptyFloatArray   = new Array[Float](0)
+  @inline def emptyIntArray     = new Array[Int](0)
+  @inline def emptyLongArray    = new Array[Long](0)
+  @inline def emptyShortArray   = new Array[Short](0)
+  @inline def emptyObjectArray  = new Array[Object](0)
 
   implicit def canBuildFrom[T](implicit t: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] =
     new CanBuildFrom[Array[_], T, Array[T]] {
@@ -117,11 +118,52 @@
    */
   // Subject to a compiler optimization in Cleanup.
   // Array(e0, ..., en) is translated to { val a = new Array(3); a(i) = ei; a }
-  def apply[T: ClassTag](xs: T*): Array[T] = {
-    val array = new Array[T](xs.length)
-    var i = 0
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
-    array
+  def apply[T: ClassTag](xs: T*): Array[T] = xs match {
+    case xs: WrappedArray.ofBoolean =>
+      val from = xs.array
+      val array = new Array[Boolean](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofByte =>
+      val from = xs.array
+      val array = new Array[Byte](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofShort =>
+      val from = xs.array
+      val array = new Array[Short](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofChar =>
+      val from = xs.array
+      val array = new Array[Char](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofInt =>
+      val from = xs.array
+      val array = new Array[Int](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofLong =>
+      val from = xs.array
+      val array = new Array[Long](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofFloat =>
+      val from = xs.array
+      val array = new Array[Float](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofDouble =>
+      val from = xs.array
+      val array = new Array[Double](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs =>
+      val array = new Array[T](xs.length)
+      var i = 0
+      for (x <- xs.iterator) { array(i) = x; i += 1 }
+      array
   }
 
   /** Creates an array of `Boolean` objects */
@@ -129,8 +171,13 @@
   def apply(x: Boolean, xs: Boolean*): Array[Boolean] = {
     val array = new Array[Boolean](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofBoolean =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -139,8 +186,13 @@
   def apply(x: Byte, xs: Byte*): Array[Byte] = {
     val array = new Array[Byte](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofByte =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -149,8 +201,13 @@
   def apply(x: Short, xs: Short*): Array[Short] = {
     val array = new Array[Short](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofShort =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -159,8 +216,13 @@
   def apply(x: Char, xs: Char*): Array[Char] = {
     val array = new Array[Char](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofChar =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -169,8 +231,13 @@
   def apply(x: Int, xs: Int*): Array[Int] = {
     val array = new Array[Int](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofInt =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -179,8 +246,13 @@
   def apply(x: Long, xs: Long*): Array[Long] = {
     val array = new Array[Long](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofLong =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -189,8 +261,13 @@
   def apply(x: Float, xs: Float*): Array[Float] = {
     val array = new Array[Float](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofFloat =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -199,8 +276,13 @@
   def apply(x: Double, xs: Double*): Array[Double] = {
     val array = new Array[Double](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofDouble =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -208,8 +290,13 @@
   def apply(x: Unit, xs: Unit*): Array[Unit] = {
     val array = new Array[Unit](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofUnit =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
