--- 2.11.12/scala/package.scala
+++ overrides-2.11/scala/package.scala
@@ -30,90 +30,90 @@
   type InterruptedException            = java.lang.InterruptedException
 
   // A dummy used by the specialization annotation.
-  val AnyRef = new Specializable {
+  lazy val AnyRef = new Specializable {
     override def toString = "object AnyRef"
   }
 
   type TraversableOnce[+A] = scala.collection.TraversableOnce[A]
 
   type Traversable[+A] = scala.collection.Traversable[A]
-  val Traversable = scala.collection.Traversable
+  lazy val Traversable = scala.collection.Traversable
 
   type Iterable[+A] = scala.collection.Iterable[A]
-  val Iterable = scala.collection.Iterable
+  lazy val Iterable = scala.collection.Iterable
 
   type Seq[+A] = scala.collection.Seq[A]
-  val Seq = scala.collection.Seq
+  lazy val Seq = scala.collection.Seq
 
   type IndexedSeq[+A] = scala.collection.IndexedSeq[A]
-  val IndexedSeq = scala.collection.IndexedSeq
+  lazy val IndexedSeq = scala.collection.IndexedSeq
 
   type Iterator[+A] = scala.collection.Iterator[A]
-  val Iterator = scala.collection.Iterator
+  lazy val Iterator = scala.collection.Iterator
 
   type BufferedIterator[+A] = scala.collection.BufferedIterator[A]
 
   type List[+A] = scala.collection.immutable.List[A]
-  val List = scala.collection.immutable.List
+  lazy val List = scala.collection.immutable.List
 
-  val Nil = scala.collection.immutable.Nil
+  lazy val Nil = scala.collection.immutable.Nil
 
   type ::[A] = scala.collection.immutable.::[A]
-  val :: = scala.collection.immutable.::
+  lazy val :: = scala.collection.immutable.::
 
-  val +: = scala.collection.+:
-  val :+ = scala.collection.:+
+  lazy val +: = scala.collection.+:
+  lazy val :+ = scala.collection.:+
 
   type Stream[+A] = scala.collection.immutable.Stream[A]
-  val Stream = scala.collection.immutable.Stream
-  val #:: = scala.collection.immutable.Stream.#::
+  lazy val Stream = scala.collection.immutable.Stream
+  lazy val #:: = scala.collection.immutable.Stream.#::
 
   type Vector[+A] = scala.collection.immutable.Vector[A]
-  val Vector = scala.collection.immutable.Vector
+  lazy val Vector = scala.collection.immutable.Vector
 
   type StringBuilder = scala.collection.mutable.StringBuilder
-  val StringBuilder = scala.collection.mutable.StringBuilder
+  lazy val StringBuilder = scala.collection.mutable.StringBuilder
 
   type Range = scala.collection.immutable.Range
-  val Range = scala.collection.immutable.Range
+  lazy val Range = scala.collection.immutable.Range
 
   // Numeric types which were moved into scala.math.*
 
   type BigDecimal = scala.math.BigDecimal
-  val BigDecimal = scala.math.BigDecimal
+  lazy val BigDecimal = scala.math.BigDecimal
 
   type BigInt = scala.math.BigInt
-  val BigInt = scala.math.BigInt
+  lazy val BigInt = scala.math.BigInt
 
   type Equiv[T] = scala.math.Equiv[T]
-  val Equiv = scala.math.Equiv
+  lazy val Equiv = scala.math.Equiv
 
   type Fractional[T] = scala.math.Fractional[T]
-  val Fractional = scala.math.Fractional
+  lazy val Fractional = scala.math.Fractional
 
   type Integral[T] = scala.math.Integral[T]
-  val Integral = scala.math.Integral
+  lazy val Integral = scala.math.Integral
 
   type Numeric[T] = scala.math.Numeric[T]
-  val Numeric = scala.math.Numeric
+  lazy val Numeric = scala.math.Numeric
 
   type Ordered[T] = scala.math.Ordered[T]
-  val Ordered = scala.math.Ordered
+  lazy val Ordered = scala.math.Ordered
 
   type Ordering[T] = scala.math.Ordering[T]
-  val Ordering = scala.math.Ordering
+  lazy val Ordering = scala.math.Ordering
 
   type PartialOrdering[T] = scala.math.PartialOrdering[T]
   type PartiallyOrdered[T] = scala.math.PartiallyOrdered[T]
 
   type Either[+A, +B] = scala.util.Either[A, B]
-  val Either = scala.util.Either
+  lazy val Either = scala.util.Either
 
   type Left[+A, +B] = scala.util.Left[A, B]
-  val Left = scala.util.Left
+  lazy val Left = scala.util.Left
 
   type Right[+A, +B] = scala.util.Right[A, B]
-  val Right = scala.util.Right
+  lazy val Right = scala.util.Right
 
   // Annotations which we might move to annotation.*
 /*
