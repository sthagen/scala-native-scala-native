--- 2.12.15/scala/runtime/ScalaRunTime.scala
+++ overrides-2.12/scala/runtime/ScalaRunTime.scala
@@ -53,62 +53,38 @@
     classTag[T].runtimeClass.asInstanceOf[jClass[T]]
 
   /** Retrieve generic array element */
-  def array_apply(xs: AnyRef, idx: Int): Any = {
-    xs match {
-      case x: Array[AnyRef]  => x(idx).asInstanceOf[Any]
-      case x: Array[Int]     => x(idx).asInstanceOf[Any]
-      case x: Array[Double]  => x(idx).asInstanceOf[Any]
-      case x: Array[Long]    => x(idx).asInstanceOf[Any]
-      case x: Array[Float]   => x(idx).asInstanceOf[Any]
-      case x: Array[Char]    => x(idx).asInstanceOf[Any]
-      case x: Array[Byte]    => x(idx).asInstanceOf[Any]
-      case x: Array[Short]   => x(idx).asInstanceOf[Any]
-      case x: Array[Boolean] => x(idx).asInstanceOf[Any]
-      case null => throw new NullPointerException
+  @inline def array_apply(xs: AnyRef, idx: Int): Any = {
+    if (xs == null) {
+      throw new NullPointerException
+    } else {
+      xs.asInstanceOf[scala.scalanative.runtime.Array[Any]].apply(idx)
     }
   }
 
   /** update generic array element */
-  def array_update(xs: AnyRef, idx: Int, value: Any): Unit = {
-    xs match {
-      case x: Array[AnyRef]  => x(idx) = value.asInstanceOf[AnyRef]
-      case x: Array[Int]     => x(idx) = value.asInstanceOf[Int]
-      case x: Array[Double]  => x(idx) = value.asInstanceOf[Double]
-      case x: Array[Long]    => x(idx) = value.asInstanceOf[Long]
-      case x: Array[Float]   => x(idx) = value.asInstanceOf[Float]
-      case x: Array[Char]    => x(idx) = value.asInstanceOf[Char]
-      case x: Array[Byte]    => x(idx) = value.asInstanceOf[Byte]
-      case x: Array[Short]   => x(idx) = value.asInstanceOf[Short]
-      case x: Array[Boolean] => x(idx) = value.asInstanceOf[Boolean]
-      case null => throw new NullPointerException
+  @inline def array_update(xs: AnyRef, idx: Int, value: Any): Unit = {
+    if (xs == null) {
+      throw new NullPointerException
+    } else {
+      xs.asInstanceOf[scala.scalanative.runtime.Array[Any]].update(idx, value)
     }
   }
 
   /** Get generic array length */
-  def array_length(xs: AnyRef): Int = xs match {
-    case x: Array[AnyRef]  => x.length
-    case x: Array[Int]     => x.length
-    case x: Array[Double]  => x.length
-    case x: Array[Long]    => x.length
-    case x: Array[Float]   => x.length
-    case x: Array[Char]    => x.length
-    case x: Array[Byte]    => x.length
-    case x: Array[Short]   => x.length
-    case x: Array[Boolean] => x.length
-    case null => throw new NullPointerException
+  def array_length(xs: AnyRef): Int = {
+    if (xs == null) {
+      throw new NullPointerException
+    } else {
+      xs.asInstanceOf[scala.scalanative.runtime.Array[Any]].length
+    }
   }
 
-  def array_clone(xs: AnyRef): AnyRef = xs match {
-    case x: Array[AnyRef]  => x.clone()
-    case x: Array[Int]     => x.clone()
-    case x: Array[Double]  => x.clone()
-    case x: Array[Long]    => x.clone()
-    case x: Array[Float]   => x.clone()
-    case x: Array[Char]    => x.clone()
-    case x: Array[Byte]    => x.clone()
-    case x: Array[Short]   => x.clone()
-    case x: Array[Boolean] => x.clone()
-    case null => throw new NullPointerException
+  def array_clone(xs: AnyRef): AnyRef = {
+    if (xs == null) {
+      throw new NullPointerException
+    } else {
+      xs.asInstanceOf[scala.scalanative.runtime.Array[Any]].clone()
+    }
   }
 
   /** Convert an array to an object array.
