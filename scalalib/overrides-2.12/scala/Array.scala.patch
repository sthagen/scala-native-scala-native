--- 2.12.15/scala/Array.scala
+++ overrides-2.12/scala/Array.scala
@@ -18,6 +18,7 @@
 import scala.reflect.{ClassTag, classTag}
 import scala.runtime.ScalaRunTime
 import scala.runtime.ScalaRunTime.{array_apply, array_update}
+import mutable.WrappedArray
 
 /** Contains a fallback builder for arrays when the element type
  *  does not have a class tag. In that case a generic array is built.
@@ -53,18 +54,18 @@
  */
 object Array extends FallbackArrayBuilding {
 
-  val emptyBooleanArray = empty[Boolean]
-  val emptyByteArray    = empty[Byte]
-  val emptyCharArray    = empty[Char]
-  val emptyDoubleArray  = empty[Double]
-  val emptyFloatArray   = empty[Float]
-  val emptyIntArray     = empty[Int]
-  val emptyLongArray    = empty[Long]
-  val emptyShortArray   = empty[Short]
+  @inline def emptyBooleanArray = new Array[Boolean](0)
+  @inline def emptyByteArray    = new Array[Byte](0)
+  @inline def emptyCharArray    = new Array[Char](0)
+  @inline def emptyDoubleArray  = new Array[Double](0)
+  @inline def emptyFloatArray   = new Array[Float](0)
+  @inline def emptyIntArray     = new Array[Int](0)
+  @inline def emptyLongArray    = new Array[Long](0)
+  @inline def emptyShortArray   = new Array[Short](0)
 
-  private[scala] //this is only private because of binary compatability
-  val emptyUnitArray    = empty[scala.runtime.BoxedUnit].asInstanceOf[Array[Unit]]
-  val emptyObjectArray  = empty[Object]
+  @inline private[scala] //this is only private because of binary compatability
+  def emptyUnitArray    = new Array[scala.runtime.BoxedUnit](0).asInstanceOf[Array[Unit]]
+  @inline def emptyObjectArray  = new Array[Object](0)
 
   implicit def canBuildFrom[T](implicit tag: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] = {
     val cls = tag.runtimeClass
@@ -89,55 +90,55 @@
   private[this] val ObjectClass = classOf[Object]
 
   private[this] val cbfBooleanArray = new CanBuildFrom[Array[_], Boolean, Array[Boolean]] {
-    def apply(from: Array[_]) = new ArrayBuilder.ofBoolean()
-    def apply() = new ArrayBuilder.ofBoolean()
+    @inline def apply(from: Array[_]) = new ArrayBuilder.ofBoolean()
+    @inline def apply() = new ArrayBuilder.ofBoolean()
   }
 
   private[this] val cbfByteArray    = new CanBuildFrom[Array[_], Byte, Array[Byte]] {
-    def apply(from: Array[_]) = new ArrayBuilder.ofByte()
-    def apply() = new ArrayBuilder.ofByte()
+    @inline def apply(from: Array[_]) = new ArrayBuilder.ofByte()
+    @inline def apply() = new ArrayBuilder.ofByte()
   }
 
   private[this] val cbfCharArray    = new CanBuildFrom[Array[_], Char, Array[Char]] {
-    def apply(from: Array[_]) = new ArrayBuilder.ofChar()
-    def apply() = new ArrayBuilder.ofChar()
+    @inline def apply(from: Array[_]) = new ArrayBuilder.ofChar()
+    @inline def apply() = new ArrayBuilder.ofChar()
   }
 
   private[this] val cbfDoubleArray  = new CanBuildFrom[Array[_], Double, Array[Double]] {
-    def apply(from: Array[_]) = new ArrayBuilder.ofDouble()
-    def apply() = new ArrayBuilder.ofDouble()
+    @inline def apply(from: Array[_]) = new ArrayBuilder.ofDouble()
+    @inline def apply() = new ArrayBuilder.ofDouble()
   }
 
   private[this] val cbfFloatArray   = new CanBuildFrom[Array[_], Float, Array[Float]] {
-    def apply(from: Array[_]) = new ArrayBuilder.ofFloat()
-    def apply() = new ArrayBuilder.ofFloat()
+    @inline def apply(from: Array[_]) = new ArrayBuilder.ofFloat()
+    @inline def apply() = new ArrayBuilder.ofFloat()
   }
 
   private[this] val cbfIntArray     = new CanBuildFrom[Array[_], Int, Array[Int]] {
-    def apply(from: Array[_]) = new ArrayBuilder.ofInt()
-    def apply() = new ArrayBuilder.ofInt()
+    @inline def apply(from: Array[_]) = new ArrayBuilder.ofInt()
+    @inline def apply() = new ArrayBuilder.ofInt()
   }
 
   private[this] val cbfLongArray    = new CanBuildFrom[Array[_], Long, Array[Long]] {
-    def apply(from: Array[_]) = new ArrayBuilder.ofLong()
-    def apply() = new ArrayBuilder.ofLong()
+    @inline def apply(from: Array[_]) = new ArrayBuilder.ofLong()
+    @inline def apply() = new ArrayBuilder.ofLong()
   }
 
   private[this] val cbfShortArray   = new CanBuildFrom[Array[_], Short, Array[Short]] {
-    def apply(from: Array[_]) = new ArrayBuilder.ofShort()
-    def apply() = new ArrayBuilder.ofShort()
+    @inline def apply(from: Array[_]) = new ArrayBuilder.ofShort()
+    @inline def apply() = new ArrayBuilder.ofShort()
   }
 
   private[this] val cbfUnitArray    = new CanBuildFrom[Array[_], Unit, Array[Unit]] {
-    def apply(from: Array[_]) = new ArrayBuilder.ofUnit()
-    def apply() = new ArrayBuilder.ofUnit()
+    @inline def apply(from: Array[_]) = new ArrayBuilder.ofUnit()
+    @inline def apply() = new ArrayBuilder.ofUnit()
   }
 
   private[this] val cbfObjectArray  = refCBF[Object]
   private[this] def refCBF[T <: AnyRef](implicit t: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] =
     new CanBuildFrom[Array[_], T, Array[T]] {
-      def apply(from: Array[_]) = new ArrayBuilder.ofRef[T]()(t)
-      def apply() = new ArrayBuilder.ofRef[T]()(t)
+      @inline def apply(from: Array[_]) = new ArrayBuilder.ofRef[T]()(t)
+      @inline def apply() = new ArrayBuilder.ofRef[T]()(t)
     }
 
   /**
@@ -184,8 +185,8 @@
   }
 
   /** Returns an array of length 0 */
-  def empty[T: ClassTag]: Array[T] =  {
-    implicitly[ClassTag[T]].emptyArray
+  @inline def empty[T: ClassTag]: Array[T] = {
+    new Array[T](0)
   }
   /** Creates an array with given elements.
    *
@@ -194,21 +195,52 @@
    */
   // Subject to a compiler optimization in Cleanup.
   // Array(e0, ..., en) is translated to { val a = new Array(3); a(i) = ei; a }
-  def apply[T: ClassTag](xs: T*): Array[T] = {
-    val len = xs.length
-    xs match {
-      case wa: mutable.WrappedArray[_] if wa.elemTag == classTag[T] =>
-        // We get here in test/files/run/sd760a.scala, `Array[T](t)` for
-        // a specialized type parameter `T`. While we still pay for two
-        // copies of the array it is better than before when we also boxed
-        // each element when populating the result.
-        ScalaRunTime.array_clone(wa.array).asInstanceOf[Array[T]]
-      case _ =>
-        val array = new Array[T](len)
-        var i = 0
-        for (x <- xs.iterator) { array(i) = x; i += 1 }
-        array
-    }
+  def apply[T: ClassTag](xs: T*): Array[T] = xs match {
+    case xs: WrappedArray.ofBoolean =>
+      val from = xs.array
+      val array = new Array[Boolean](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofByte =>
+      val from = xs.array
+      val array = new Array[Byte](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofShort =>
+      val from = xs.array
+      val array = new Array[Short](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofChar =>
+      val from = xs.array
+      val array = new Array[Char](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofInt =>
+      val from = xs.array
+      val array = new Array[Int](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofLong =>
+      val from = xs.array
+      val array = new Array[Long](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofFloat =>
+      val from = xs.array
+      val array = new Array[Float](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofDouble =>
+      val from = xs.array
+      val array = new Array[Double](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs =>
+      val array = new Array[T](xs.length)
+      var i = 0
+      for (x <- xs.iterator) { array(i) = x; i += 1 }
+      array
   }
 
   /** Creates an array of `Boolean` objects */
@@ -216,8 +248,13 @@
   def apply(x: Boolean, xs: Boolean*): Array[Boolean] = {
     val array = new Array[Boolean](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofBoolean =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -226,8 +263,13 @@
   def apply(x: Byte, xs: Byte*): Array[Byte] = {
     val array = new Array[Byte](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofByte =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -236,8 +278,13 @@
   def apply(x: Short, xs: Short*): Array[Short] = {
     val array = new Array[Short](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofShort =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -246,8 +293,13 @@
   def apply(x: Char, xs: Char*): Array[Char] = {
     val array = new Array[Char](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofChar =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -256,8 +308,13 @@
   def apply(x: Int, xs: Int*): Array[Int] = {
     val array = new Array[Int](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofInt =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -266,8 +323,13 @@
   def apply(x: Long, xs: Long*): Array[Long] = {
     val array = new Array[Long](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofLong =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -276,8 +338,13 @@
   def apply(x: Float, xs: Float*): Array[Float] = {
     val array = new Array[Float](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofFloat =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -286,8 +353,13 @@
   def apply(x: Double, xs: Double*): Array[Double] = {
     val array = new Array[Double](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofDouble =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
@@ -295,8 +367,13 @@
   def apply(x: Unit, xs: Unit*): Array[Unit] = {
     val array = new Array[Unit](xs.length + 1)
     array(0) = x
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofUnit =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
     array
   }
 
